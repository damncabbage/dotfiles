#!/bin/bash

mkcd() {
  if [ $# -ne 1 ]; then
    echo "Usage: mkcd path/to/make/and/cd/into"
    return 1
  fi
  mkdir -p "$1" && cd "$1"
}

history_delete_last() {
  (
    set -e;
    set -o pipefail;
    set -x
    local LAST_NUM;
    LAST_NUM=$(history | tail -1 | sed 's/^[ ]*//' | cut -f1 -d' ');
    history -d "$LAST_NUM"
  )
}

# 'where am i'; I am a person who inevitably opens bash inside vim inside bash, and
# I want a quick shortcut to figure this out.
alias wai='pstree -p $$'

# eg.
#  $ join_by "," 1 2 3
#  1,2,3
join_by () {
  local IFS="$1";
  shift;
  echo "$*"
}

# eg.
#   $ permutations0 A B | xargs -n 1 -0 echo
#   A B
#   B A
permutations0 () {
  ruby -e 'print ARGV.permutation.map {|x| x.join(" ") }.join("\0")' -- "$@"
}

urldecode() {
  if [ -z "$1" ]; then
    echo -e "$(sed 's/+/ /g;s/%\(..\)/\\x\1/g;')"
  else
    echo "$@" | echo -e "$(sed 's/+/ /g;s/%\(..\)/\\x\1/g;')"
  fi
}

# mv with an interactive second arg, eg.
#   $ mvv foo/bar/baz
#   foo/bar/baz^Hck^M
# ... moves foo/bar/baz to foo/bar/back
mvv() {
  if [ "$#" -ne 1 ]; then
    command mv "$@"
    return
  fi
  if [ ! -f "$1" ]; then
    command file "$@"
    return
  fi

  read -ei "$1" newfilename
  mv -v "$1" "$newfilename"
}

mcd() {
  mkdir -p "$@" && cd "$@"
}
